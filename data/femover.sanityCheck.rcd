
# The top part of this file is basic configuration information, including
# database connection parameters and reporting data.  The lower part of the
# file includes the tests.

#-----------------------------------------------------------------------------
# basic configuration data:  (edit as needed)
#
# source database

SOURCE_TYPE = postgres		# Current only postgres is supported
SOURCE_SERVER = cardolan	# Postgres host
SOURCE_NAME = pub		# name of the database
SOURCE_USER = mgd_public	# database username
SOURCE_PASSWORD = mgdpub	# database username's password

# target database (see source database section for options)

TARGET_TYPE = postgres
TARGET_SERVER = cardolan
TARGET_NAME = fe_backend
TARGET_USER = mgddbo
TARGET_PASSWORD = mgddbo

# maximum number of errors encountered before quitting (comment this line out
# for no limit)
MAX_ERROR_COUNT = 5

# to whom should a report be emailed, whether errors were found or not?
# (comment this line out for no general reporting email)
REPORT_EMAIL = jsb@informatics.jax.org

# to whom should a report be emailed if errors were found? (comment this line
# out for no error-reporting email)
ERROR_EMAIL = jsb@informatics.jax.org

#-----------------------------------------------------------------------------
# Each record in the lower part of this file defines one sanity-checking test
# to be run against one or two databases.  (We can test either a single
# database or do a comparison of query results from two databases.)

#-----------------------------------------------------------------------------
# Constants values to be used in defining MODE, TABLE_SET, and COMPARISON
# fields:  (do not edit these)

# values for MODE:
SINGLE = 'single database'
DUAL = 'dual databases'

# values for TABLE_SET:
#	if we want a test to loop over the set of tables from one of the
#	databases, which set?  (also fills each table name in for %s in the
#	query and message?)
SOURCE_TABLES = 'source tables'
TARGET_TABLES = 'target tables'

# values for COMPARISON when comparing to a count on a single-database test:
#	when testing a count, what comparison against the target value do we
#	use?  (if the chosen comparison is not true for the two values, then
#	the test fails)
LESS_THAN = 'less than'
GREATER_THAN = 'greater than'
EQUALS = 'equals'
NOT_EQUALS = 'not equals'

#-----------------------------------------------------------------------------
# Single database tests are run against the target database.
#
# Tests against a single database must have the following items declared:
#	ID - unique value to identify the particular test in this file
#	MODE - SINGLE
#	TARGET_SQL - SQL command returning a single integer value
#	VALUE - integer value to which to compare the query result
#	COMPARISON - type of comparison to use: LESS_THAN, GREATER_THAN,
#		EQUALS, or NOT_EQUALS
# Optional items include:
# 	TABLE_SET - should only be TARGET_TABLES for single database tests
#	MESSAGE - message to send if test fails (can include %s for table
#		name, if TABLE_SET is specified).  If no message is specified
#		the system will generate one.

#-----------------------------------------------------------------------------
# Dual database tests are used to compare results of queries against the
#	source database and the target database.  It is assumed that both
#	queries return a single integer count and that those two counts must
#	be equal for a successful test.
#
# Tests against both databases must have the following items declared:
#	ID - unique value to identify the particular test in this file
#	MODE - DUAL
#	TARGET_SQL - SQL command returning a single integer value from the
#		target database
# optional items include:
# 	TABLE_SET - can be either SOURCE_TABLES or TARGET_TABLES, depending
#		on which set of tables we want the test to loop over
#	MESSAGE - message to send if test fails (can include %s for table
#		name, if TABLE_SET is specified).  If no message is specified
#		the system will generate one.
#	SOURCE_SQL - if we need to run different SQL against the source
#		database, then we can define that alternate command here

#-----------------------------------------------------------------------------
# Sample Tests: (edit and add from here on)

# We do not include markers at this point, because it would require a fair
# amount of work; we include only certain markers from mgd, rather than all
# of them.

[
ID=probe count
MODE=${DUAL}
TARGET_SQL=select count(1) from probe
SOURCE_SQL=select count(1) from PRB_Probe
]

[
ID=allele count
MODE=${DUAL}
TARGET_SQL=select count(1) from allele
SOURCE_SQL=select count(1) from ALL_Allele
]

[
ID=allele sequence num table
MODE=${DUAL}
TARGET_SQL=select count(1) from allele_sequence_num
SOURCE_SQL=select count(1) from ALL_Allele
]

[
ID=allele counts table
MODE=${DUAL}
TARGET_SQL=select count(1) from allele_counts
SOURCE_SQL=select count(1) from ALL_Allele
]

[
ID=reference count
MODE=${DUAL}
TARGET_SQL=select count(1) from reference
SOURCE_SQL=select count(1) from BIB_Refs
]

[
ID=reference sequence num table
MODE=${DUAL}
TARGET_SQL=select count(1) from reference_sequence_num
SOURCE_SQL=select count(1) from BIB_Refs
]

[
ID=reference counts table
MODE=${DUAL}
TARGET_SQL=select count(1) from reference_counts
SOURCE_SQL=select count(1) from BIB_Refs
]

[
ID=sequence count
MODE=${DUAL}
TARGET_SQL=select count(1) from sequence
SOURCE_SQL=select count(1) from SEQ_Sequence
]

[
ID=sequence counts table
MODE=${DUAL}
TARGET_SQL=select count(1) from sequence_counts
SOURCE_SQL=select count(1) from SEQ_Sequence
]

[
ID=sequence sequence num table
MODE=${DUAL}
TARGET_SQL=select count(1) from sequence_sequence_num
SOURCE_SQL=select count(1) from SEQ_Sequence
]

[
ID=genotype count
MODE=${DUAL}
TARGET_SQL=select count(1) from genotype
SOURCE_SQL=select count(1) from GXD_Genotype
]

[
ID=vocab term count
MODE=${DUAL}
TARGET_SQL=select count(1) from term
SOURCE_SQL=select count(1) from VOC_Term
]

[
ID=vocab count
MODE=${DUAL}
TARGET_SQL=select count(1) from vocabulary
SOURCE_SQL=select count(1) from VOC_Vocab
]

[
ID=image count
MODE=${DUAL}
TARGET_SQL=select count(1) from image
SOURCE_SQL=select count(1) from IMG_Image
]

[
ID=expression assay count
MODE=${DUAL}
TARGET_SQL=select count(1) from expression_assay
SOURCE_SQL=select count(1) from GXD_Assay
]

[
ID=expression index count
MODE=${DUAL}
TARGET_SQL=select count(1) from expression_index
SOURCE_SQL=select count(1) from GXD_Index
]

[
ID=expression index sequence num
MODE=${DUAL}
TARGET_SQL=select count(1) from expression_index_sequence_num
SOURCE_SQL=select count(1) from GXD_Index
]

# catch all - ensure there are no empty tables in the target database
[
ID=no empty tables
MODE=${SINGLE}
TABLE_SET=${TARGET_TABLES}
TARGET_SQL=select count(1) from %s
COMPARISON=${GREATER_THAN}
VALUE=0
MESSAGE=Table %s is empty in the target database.
]
